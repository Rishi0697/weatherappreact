{"version":3,"sources":["Component/Registration.js","Component/Login.js","Component/Validate.js","App.js","reportWebVitals.js","index.js"],"names":["Registration","className","htmlFor","type","name","id","href","Login","useState","password","phone","username","email","setName","errors","setErrors","isSubmit","setIsSubmit","useEffect","Object","keys","length","console","log","validate","values","error","onSubmit","e","preventDefault","onChange","target","value","Validate","city","setCity","search","setSearch","fetchApi","a","url","fetch","response","json","responseJson","main","style","width","height","backgroundColor","borderRadius","temp","temp_max","temp_min","App","exact","path","element","to","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e690b0f0.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Registration() {\r\n  return (\r\n    <>\r\n      <div className=\"main_div\">\r\n        <div className=\"container text-center\">\r\n          <div className=\"row\">\r\n            <div className=\"col-lg-4 col-md-4 col-10 content_div mx-auto my-5 \">\r\n              <lable htmlFor=\"name\">Enter Your Name</lable>\r\n              <br />\r\n              <input type=\"text\" name=\"name\" />\r\n              <br />\r\n\r\n              <lable htmlFor=\"name\">Enter Your Email</lable>\r\n              <br />\r\n              <input type=\"email\" name=\"name\" />\r\n              <br />\r\n\r\n              <lable htmlFor=\"name\">Enter Your Password</lable>\r\n              <br />\r\n              <input type=\"password\" name=\"name\" />\r\n              <br />\r\n              <button className=\"my-2\" id =\"btn\"><a href=\"/registration\">Register</a></button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Registration;\r\n","import React, {useState, useEffect} from 'react'\r\n\r\nfunction Login() {\r\n    const [name, setName] = useState({\r\n        name:\"\",\r\n        password:\"\",\r\n        phone:\"\",\r\n        username:\"\",\r\n        email:\"\"\r\n    })\r\n    const [errors, setErrors] = useState({});\r\n    const [isSubmit, setIsSubmit] = useState(false);\r\n    const handleOnChange = (e)=>{\r\n        const {name, value} = e.target;\r\n        setName({...name, [name]:value});\r\n    }\r\n    const handleOnSubmit = (e)=>{\r\n        e.preventDefault();\r\n        setErrors(validate(name));\r\n        setIsSubmit(true);\r\n    }\r\n    useEffect(()=>{\r\n        if(Object.keys(errors).length === 0 && isSubmit){\r\n            console.log(errors);\r\n        }\r\n    },[errors]);\r\n\r\n    const validate = (values)=>{\r\n        const error = {};\r\n        // const regex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]{2,}$/i;\r\n        if(!values.name){\r\n            error.name = \"name is required\";\r\n        }\r\n        // if(!values.password){\r\n        //     error.password = \"password is required\";\r\n        // }\r\n        // if(!values.phone){\r\n        //     error.phone = \"phone is required\";\r\n        // }\r\n        // else if(values.phone < 10 || values.phone > 10){\r\n        //     error.phone = \"Not a valid phone number\";\r\n        // }\r\n        // if(!values.username){\r\n        //     error.username = \"username is required\";\r\n        // }\r\n        // if(!values.email){\r\n        //     error.email = \"email is required\";\r\n        // }\r\n        // else if(!regex.test(values.email)){\r\n        //     error.email = \"this is not a valid email\";\r\n        // }\r\n        return error;\r\n    }\r\n\r\n    return (\r\n        <>\r\n              <div className=\"main_div\">\r\n        <div className=\"container text-center\">\r\n          <div className=\"row\">\r\n            <div className=\"col-lg-4 col-md-4 col-10 content_div mx-auto my-5\">\r\n                <form onSubmit={handleOnSubmit}>\r\n              <lable htmlFor=\"name\">Enter Your Name</lable>\r\n              <br />\r\n              <input type=\"text\" name=\"name\" id=\"name\" onChange={handleOnChange} value={name.name}/>\r\n              <br />\r\n              <p className=\"text-danger\">{errors.name}</p>\r\n\r\n              <lable htmlFor=\"password\">Password</lable>\r\n              <br/>\r\n              <input type=\"password\" name=\"password\" id=\"password\" value={name.password}/>\r\n              <br />\r\n              <p className=\"text-danger\">{errors.password}</p>\r\n\r\n              <lable htmlFor=\"phone\">Mobile Number</lable>\r\n              <br />\r\n              <input type=\"tel\" name=\"phone\" id=\"phone\" value={name.phone}/>\r\n              <br />\r\n              <p className=\"text-danger\">{errors.phone}</p>\r\n              <lable htmlFor=\"username\">Username</lable>\r\n              <br />\r\n              <input type=\"text\" name=\"username\" id=\"username\" value={name.username}/>\r\n              <br />\r\n              <p className=\"text-danger\">{errors.username}</p>\r\n              <lable htmlFor=\"email\">Email</lable>\r\n              <br />\r\n              <input type=\"email\" name=\"email\" id=\"email\" value={name.email}/>\r\n              <br />\r\n              <p className=\"text-danger\">{errors.email}</p>\r\n              <button type=\"submit\">Validate</button>\r\n              {/* <button className=\"my-2 mx-4\" id =\"btn\"><a href=\"/validate\">Login</a></button> */}\r\n              {\r\n                  (Object.keys(errors).length === 0 && isSubmit) ?\r\n              \r\n              (<button className=\"my-2 mx-4\" id =\"btn\"><a href=\"/validate\">Login</a></button>)\r\n              : (<p className=\"text-primary\">plese validate the form</p>)\r\n}\r\n              </form>\r\n              \r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n            \r\n        </>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","import React, { useState, useEffect } from 'react'\r\n\r\nfunction Validate() {\r\n    const [city, setCity] = useState(null);\r\n    const [search, setSearch] = useState(\"mumbai\");\r\n    useEffect(() => {\r\n       const fetchApi = async()=>{\r\n        const url = `https://api.openweathermap.org/data/2.5/weather?q=${search}&units=metric&appid=f9fb1617ce3c14dfdff846cb52e13fc3`;\r\n        const response = await fetch(url);\r\n        const responseJson = await response.json();\r\n        // console.log(responseJson);\r\n        setCity(responseJson.main);\r\n       }\r\n       fetchApi();\r\n    }, [search])\r\n    return (\r\n        <div style={{width:'100%', height:\"100vh\",backgroundColor:'#ABB8C3'}}>\r\n            <div className=\"container text-center\">\r\n                <div className=\"row\">\r\n                <div className=\"col-lg-6 col-md-6 col-10 mx-auto\">\r\n                    <input type=\"search\" className='my-5' onChange={(e)=>{setSearch(e.target.value)}} style={{borderRadius:\"5px\"}}/>\r\n                    {\r\n                        !city ? (<p>Data Not Found</p>): \r\n                    (<div>\r\n                    <h2 className='text-success'>{search}</h2>\r\n                    <h3>Current Temp : {city.temp}℃el</h3>\r\n                    <p>max-temp : {city.temp_max}℃el</p>\r\n                    <p>min-temp: {city.temp_min}℃el</p>\r\n                    </div>)\r\n}\r\n<button className=\"my-2 mx-4\" id =\"btn\"><a href=\"/logout\">Logout</a></button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Validate\r\n","import React from \"react\";\nimport { Route, Routes, Navigate } from \"react-router-dom\";\nimport './App.css';\nimport Registration from './Component/Registration';\nimport Login from './Component/Login';\nimport Validate from \"./Component/Validate\";\n\nfunction App() {\n  return (\n    <>\n    <Routes>\n      <Route exact path =\"/\" element={<Registration/>}/>\n      <Route exact path =\"/registration\" element={<Login/>}/>\n      <Route exact path =\"/validate\" element={<Validate/>}/>\n      <Route path=\"*\" element={<Navigate to=\"/\"/>}/>\n      \n    </Routes>\n    \n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n \n    <BrowserRouter>\n    <App />\n    </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}